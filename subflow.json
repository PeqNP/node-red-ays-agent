[
    {
        "id": "1740557087110d8c",
        "type": "subflow",
        "name": "ays-agent",
        "info": "# Node-RED `ays-agent`\n\nThis provides an interface to the At Your Service agent from within Node-RED. This is accomplished by adding an `ays-agent` subflow and adding two global environment variables.\n\n## Installation\n\nPlease note: The agent has only been tested on Node-RED v3.1.6.\n\n### Install the Subflow\n\nThere are two ways to install the `ays-agent` subflow.\n\n**1. Import subflow.json file**\n\n- Clone the `ays-agent` repository\n- Open Node-RED\n- Tap the menu button on the top right > `Import` > `select a file to import`\n- Select the `/path/to/ays-agent/node-red/subflow.json` file and import\n\n**2. Import JSON structure**\n\nYou may also copy the [subflow JSON structure](https://github.com/PeqNP/ays-agent/blob/main/node-red/subflow.json) directly.\n\n- Copy the raw contents, of the [subflow JSON structure](https://github.com/PeqNP/ays-agent/blob/main/node-red/subflow.json)\n- Open Node-RED\n- Tap the menu button on the top right > `Import`\n- Paste the contents into the `Clipboard`'s text area box\n- Tap `Import`\n\n### Add Environment Variables\n\nTap the menu button on the top right > `Settings` > `Environment`. Add these environment variables:\n\n- `AYS_SERVER` with the value `http://localhost:9443/agent/`. If necessary, please change this to the location of your local instance.\n- `AYS_ORG_SECRET` with the value of your respective Organization's secret.\n  - To find your org secret, navigate to the top-most org node in your System Graph\n  - Tap the `Edit` mode\n  - Tap your organization node in the System Graph\n  - Once the form appears, tap the `Organization configuration`\n  - Tap the \"Copy\" icon in the `Secret` row\n  - Paste this value into your `AYS_ORG_SECRET` environment variable value inside Node-RED\n\n## Usage\n\nDrag the `ays-agent` subflow into your flow. It should be located in the `network` category.\n\nConnect any of your HW/SW systems to the `ays-agent` input. The input must be a numeric value.\n\n**Required Parameters:**\n\n- `Server` Unless you need a different server, leave this as `AYS_SERVER`, or update the environment variable.\n- `Org Secret`. If you are sending messages to multiple orgs (uncommon),  leave this as `AYS_ORG_SECRET`, or update the environment variable.\n- `Parent Node` This is the parent node your child will live under.\n- `Child Node` The name of the child node. Please use the character range `[a-z0-9]`, or the hyphen (`-`) character, where the first character in the name is a letter. e.g. `my-node-01`\n\n**Optional Parameters:**\n\n- `Monitor Name` The name of the monitor. If none is provided, `node-red` is used.\n- `Threshold` Trigger a threshold if a value falls outside of specified range. Refer to the [ays-agent API docs](../docs/api.md#--value-threshold-optional) for a list of supported threshold formats.\n- `Heartbeat` The default is set for 5 minutes. If you don't want to monitor the node, set the heartbeat value to `0`.\n- `Template` Adopt a template located at the specified node path.\n\n## Debugging\n\nThe `ays-agent` subflow emits `node.error`s messages (which can be seen in the Debug panel) _and_ provides node status messages hints that display under the `ays-agent` subflow instance. If an node status is displayed, please open the Debug menu for more information.\n\nThe most common problems are:\n\n- A required parameter is not provided\n- Connection to the AYS server failed\n\n## Help\n\nDo you need help configuring the agent? Do you have a feature suggestion? If so, please call me at 253-329-1280.",
        "category": "network",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "430863a5326ead70"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "AYS_SERVER",
                "type": "env",
                "value": "AYS_SERVER",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "Server"
                    }
                }
            },
            {
                "name": "AYS_ORG_SECRET",
                "type": "env",
                "value": "AYS_ORG_SECRET",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Org Secret"
                    }
                }
            },
            {
                "name": "AYS_PARENT",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Parent Node"
                    }
                }
            },
            {
                "name": "AYS_CHILD",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Child Node"
                    }
                }
            },
            {
                "name": "AYS_MONITOR_NAME",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Monitor Name"
                    }
                }
            },
            {
                "name": "AYS_MONITOR_THRESHOLD",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bar-chart",
                    "label": {
                        "en-US": "Threshold"
                    }
                }
            },
            {
                "name": "AYS_HEARTBEAT",
                "type": "num",
                "value": "300",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "en-US": "Heartbeat (Seconds)"
                    }
                }
            },
            {
                "name": "AYS_TEMPLATE",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-copy",
                    "label": {
                        "en-US": "Template"
                    }
                }
            }
        ],
        "meta": {
            "module": "ays-agent",
            "version": "1.0.0",
            "author": "Eric Chamberlain",
            "desc": "Send sample values from HW/SW systems to the At Your Service agent.",
            "keywords": "node-red,ays-agent",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "inputLabels": [
            "Sample value"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 940,
            "y": 260,
            "wires": [
                {
                    "id": "430863a5326ead70",
                    "port": 0
                },
                {
                    "id": "89e7cf405b062c67",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "10dca92c4fcce83a",
        "type": "http request",
        "z": "1740557087110d8c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 650,
        "y": 120,
        "wires": [
            [
                "0af670aec32b0f85",
                "89e7cf405b062c67"
            ]
        ]
    },
    {
        "id": "430863a5326ead70",
        "type": "function",
        "z": "1740557087110d8c",
        "name": "create_payload",
        "func": "var server = env.get(\"AYS_SERVER\").trim();\nvar org_secret = env.get(\"AYS_ORG_SECRET\").trim();\nvar parent_node = env.get(\"AYS_PARENT\").trim();\nvar child_node = env.get(\"AYS_CHILD\").trim();\nvar monitor_name = env.get(\"AYS_MONITOR_NAME\").trim();\nvar threshold = env.get(\"AYS_MONITOR_THRESHOLD\").trim();\nvar heartbeat = env.get(\"AYS_HEARTBEAT\");\nvar template = env.get(\"AYS_TEMPLATE\").trim();\n\n// TODO: What happens if server is not set?\n\n// Set the \"error\" status of the node\nfunction set_error(msg, text) {\n    var status = ({fill: \"red\", shape: \"ring\", text: text});\n    msg.payload = status;\n    return msg;\n}\n\nif (server.length == 0) {\n    node.error(\"A global AYS_SERVER variable must be configured\");\n    return set_error(msg, \"AYS_SERVER required\");\n}\nif (org_secret.length == 0) {\n    node.error(\"A global AYS_ORG_SECRET must be configured\");\n    // TODO: Display an error under the node\n    return set_error(msg, \"AYS_ORG_SECRET required\");\n}\nif (parent_node.length == 0) {\n    node.error(\"A parent node must be provided\");\n    return set_error(msg, \"Parent Node is required\");\n}\nif (child_node.length == 0) {\n    node.error(\"A child node, or child relative path, must be provided\");\n    return set_error(msg, \"Child Node is required\");\n}\nif (monitor_name.length == 0) {\n    monitor_name = \"node-red\";\n}\n\nvar payload = {\n    org_secret: org_secret, // \"zki8y1v\"\n    parent: {\n        property: \"path\",\n        value: parent_node\n    },\n    relationship: {\n        type: \"child\",\n        monitor_name: monitor_name,\n        path: child_node\n    },\n    value: {\n        name: \"value\",\n        value: msg.payload\n    },\n    check: true\n};\n\nif (threshold.length > 0) {\n    payload.value.threshold_format = threshold;\n}\n\nif (template.length != 0) {\n    payload.template = template;\n}\n\nif (heartbeat > 0) {\n    payload.heartbeat = {\n        \"timeout\": heartbeat,\n        \"level\": \"critical\"\n    }\n}\n\nmsg.url = server;\nmsg.aysPayload = payload;\nmsg.payload = ({ fill: \"green\", shape: \"dot\"});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "01c21f55db62e84d"
            ]
        ]
    },
    {
        "id": "0af670aec32b0f85",
        "type": "debug",
        "z": "1740557087110d8c",
        "name": "Debug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "01c21f55db62e84d",
        "type": "function",
        "z": "1740557087110d8c",
        "name": "filter_error_status",
        "func": "// Filter messages that have no URL. This happens when an \"error\" status message\n// is shown. Terminate out the flow immediately.\nif (msg.url == null) {\n    return null;\n}\n\nmsg.payload = msg.aysPayload;\ndelete msg.aysPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "10dca92c4fcce83a"
            ]
        ]
    },
    {
        "id": "89e7cf405b062c67",
        "type": "function",
        "z": "1740557087110d8c",
        "name": "status",
        "func": "// If error occurred, display error status\nif (msg.statusCode >= 400 || msg.statusCode == \"ECONNREFUSED\") {\n    if (typeof msg.payload === \"string\" || msg.payload instanceof String) {\n        node.error(msg.payload, msg);\n        msg.payload = ({ fill: \"red\", shape: \"ring\", text: \"Request failed: \" + msg.statusCode });\n    }\n    else {\n        node.error(msg.payload.error.message, msg);\n        msg.payload = ({ fill: \"red\", shape: \"ring\", text: msg.payload.error.message });\n    }\n}\nelse {\n    msg.payload = ({fill: \"green\", shape: \"dot\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            []
        ]
    }
]
